修改 EncodingBox 初始化代码的位置，避免出错
修改 TextBoxEx，增加ReadOnly属性，可直接修改某个编码下的文本
完善类库
    接收文件
    客户端断开检测
        若客户端已断开抛出该异常，可以释放负责处理的socket了
        若检测到特定异常，将该连接删除
    服务器端连接池，限制客户端接入数目
	定时发送心跳包


常见字符集英文和汉字占的字节数
    编码           英文 中文
    ----           ---- ----
    GB2312          1    2
    GBK             1    2
    GB18030         1    2
    ISO-8859-1      1    1
    UTF-8           1    3
    UTF-16          4    4
    UTF-16BE        2    2
    UTF-16LE        2    2
    Unicode         2    2



-----------------------------------------------------
/文本转化及加密工具
/用Encoding.EncodingName来简化下拉框绑定
/定制EncodingCombobox
/客户端复用日志ui模块
/二进制发送
/可用各种编码查看发送的数据
/拆成类库 Kingsoc.Net.Sockets
/自定义消息参数
/通信协议解析（在事件中手工解析吧）
    解析器模式？
    事件模式
    /支持二进制协议
/完善界面
    /停止监听后无法重新开始监听
    /界面先后逻辑（无所谓，随便测试）
/抽离出类库
    /SocketBase
    /SocketServer
    /SocketClient
    /优化提示信息
    /正常关闭线程

    /用task改造，简化线程
/修正bug
    /客户端可以反复连接
    /服务端可以反复接收请求
/一个入口窗体，两个小窗体
/用partial class 方式
/utf-8  传输，支持汉字



-----------------------------------------------------
            if (arg.Length == 1 && arg[0] == "udp")
                Application.Run(new FormUdp());
            else


                        cmb.Items.Clear();
            cmb.Items.Add("127.0.0.1");
            System.Net.IPAddress[] ips = System.Net.Dns.Resolve(System.Net.Dns.GetHostName()).AddressList;
            foreach (IPAddress ip in ips)
                cmb.Items.Add(ip.ToString());

            cmb.SelectedIndex = 0;
                        foreach (Socket socket in _server.socketAccepts)
            {
                if (socket.Connected)
                    SocketBase.Send(socket, this.tbServerText.Text, isUtf8);
            }

            
                    Task task = new Task
                    threadReceive = new Thread(new ThreadStart(base.Receive));
                    threadReceive.Start();
                                    threadAccept.Abort();
            NetworkStream ns = new NetworkStream(socket);
            ns.Write(buf, 0, buf.Length);


                    /// <summary>
        /// 给所有客户端发送消息
        /// </summary>
        public void Broadcast(string text)
        {
            foreach (SocketInfo si in SocketAccepts)
            {
                try
                {
                    if (si.Socket.Connected)
                        Send(si.Socket, text);
                }
                catch (Exception ex)
                {
                    base.TriggerError("发送失败: " + ex.Message);
                }
            }
            base.TriggerSended("群发完毕: " + text);
        }

                    if (n < this.SocketAccepts.Count)
            {
                try
                {
                    Socket socket = this.SocketAccepts[n].Socket;
                    Send(socket, text);
                    base.TriggerSended("发送消息: [" + n + "] " + text);
                }
                catch (Exception ex)
                {
                    base.TriggerError("发送失败: [" + n + "] " + ex.Message);
                }
            }

                    protected static void Send(Socket socket, string data, bool utf8=true)
        {
            byte[] buf;
            if (utf8) buf = System.Text.Encoding.UTF8.GetBytes(data);
            else      buf = System.Text.Encoding.ASCII.GetBytes(data);
            Send(socket, buf);
        }
                protected static string Receive(NetworkStream ns, bool utf8=true)
        {
            byte[] buf = new byte[10240];
            int n = ns.Read(buf, 0, buf.Length);
            if (utf8) return System.Text.Encoding.UTF8.GetString(buf, 0, n);
            else      return System.Text.Encoding.ASCII.GetString(buf, 0, n);
        }


            public class SocketListeningArg
    {
        public string Port { get; set; }
    }
    public class SocketClientAcceptedArg
    {
        public int Index { get; set; }
        public string Addr { get; set; }
    }
    public class SocketClientClosedArg
    {
        public int Index { get; set; }
    }
	        // 日志
        void Log(string format, params object[] args)
        {
            string text = string.Format(format, args);
            Action<string> action = (str) =>
            {
                
                this.tbLog.Text += str + "\r\n";
            };
            this.Invoke(action, text);
        }
